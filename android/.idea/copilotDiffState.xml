<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/lumoralabs/macro/data/UserProfileRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/lumoralabs/macro/data/UserProfileRepository.kt" />
              <option name="originalContent" value="package com.lumoralabs.macro.data&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.util.Log&#10;import com.lumoralabs.macro.domain.UserProfile&#10;import org.json.JSONObject&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;&#10;object UserProfileRepository {&#10;    private const val PREFS_NAME = &quot;user_profile&quot;&#10;    private const val PROFILE_KEY = &quot;profile&quot;&#10;    private const val TAG = &quot;UserProfileRepository&quot;&#10;&#10;    private fun getPrefs(context: Context): SharedPreferences = &#10;        context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;    suspend fun saveProfile(context: Context, profile: UserProfile) {&#10;        // Always save locally first for immediate access&#10;        saveProfileLocally(context, profile)&#10;&#10;        // Save to cloud if user is authenticated&#10;        val currentUser = SupabaseService.Auth.getCurrentUser(context)&#10;        if (currentUser != null) {&#10;            // TODO: Fix this when we have proper user ID access&#10;            // saveProfileToCloud(context, profile, currentUser.id)&#10;        }&#10;    }&#10;    &#10;    private fun saveProfileLocally(context: Context, profile: UserProfile) {&#10;        val prefs = getPrefs(context)&#10;        val obj = JSONObject().apply {&#10;            put(&quot;firstName&quot;, profile.firstName)&#10;            put(&quot;lastName&quot;, profile.lastName)&#10;            put(&quot;age&quot;, profile.age)&#10;            put(&quot;dob&quot;, profile.dob)&#10;            put(&quot;height&quot;, profile.height)&#10;            put(&quot;weight&quot;, profile.weight)&#10;            put(&quot;gender&quot;, profile.gender)&#10;            put(&quot;goal&quot;, profile.goal)&#10;            put(&quot;activityLevel&quot;, profile.activityLevel)&#10;            put(&quot;macroPreference&quot;, profile.macroPreference)&#10;        }&#10;        prefs.edit().putString(PROFILE_KEY, obj.toString()).apply()&#10;    }&#10;    &#10;    private suspend fun saveProfileToCloud(context: Context, profile: UserProfile, userId: String) = withContext(Dispatchers.IO) {&#10;        val data = mapOf(&#10;            &quot;id&quot; to userId,&#10;            &quot;first_name&quot; to profile.firstName,&#10;            &quot;last_name&quot; to profile.lastName,&#10;            &quot;age&quot; to profile.age,&#10;            &quot;dob&quot; to profile.dob,&#10;            &quot;height&quot; to profile.height,&#10;            &quot;weight&quot; to profile.weight,&#10;            &quot;gender&quot; to profile.gender,&#10;            &quot;goal&quot; to profile.goal,&#10;            &quot;activity_level&quot; to profile.activityLevel,&#10;            &quot;macro_preference&quot; to profile.macroPreference,&#10;            &quot;last_updated&quot; to System.currentTimeMillis()&#10;        )&#10;        &#10;        try {&#10;            // TODO: Implement Supabase client properly&#10;            // val client = SupabaseService.getClient(context)&#10;            // client.from(&quot;user_profiles&quot;).upsert(data)&#10;            Log.d(TAG, &quot;Profile would be saved to Supabase cloud when implemented&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error saving profile to Supabase cloud&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun loadProfile(context: Context): UserProfile? {&#10;        return loadProfileLocally(context)&#10;    }&#10;&#10;    private fun loadProfileLocally(context: Context): UserProfile? {&#10;        val prefs = getPrefs(context)&#10;        val profileStr = prefs.getString(PROFILE_KEY, null) ?: return null&#10;        &#10;        return try {&#10;            val obj = JSONObject(profileStr)&#10;            UserProfile(&#10;                firstName = obj.optString(&quot;firstName&quot;, &quot;&quot;),&#10;                lastName = obj.optString(&quot;lastName&quot;, &quot;&quot;),&#10;                age = obj.optInt(&quot;age&quot;, 0),&#10;                dob = obj.optString(&quot;dob&quot;, &quot;&quot;),&#10;                height = obj.optDouble(&quot;height&quot;, 0.0).toFloat(),&#10;                weight = obj.optDouble(&quot;weight&quot;, 0.0).toFloat(),&#10;                gender = obj.optString(&quot;gender&quot;, &quot;&quot;),&#10;                goal = obj.optString(&quot;goal&quot;, null),&#10;                activityLevel = obj.optString(&quot;activityLevel&quot;, null),&#10;                macroPreference = obj.optString(&quot;macroPreference&quot;, null)&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error parsing profile&quot;, e)&#10;            null&#10;        }&#10;    }&#10;&#10;    suspend fun loadProfile(context: Context, onResult: (UserProfile?) -&gt; Unit = {}) {&#10;        // Try to load from cloud first if user is authenticated&#10;        val currentUser = SupabaseService.Auth.getCurrentUser(context)&#10;        if (currentUser != null) {&#10;            // TODO: Implement cloud loading when we have proper user ID access&#10;            // loadProfileFromCloud(context, currentUser.id) { cloudProfile -&gt;&#10;            //     if (cloudProfile != null) {&#10;            //         saveProfileLocally(context, cloudProfile)&#10;            //         onResult(cloudProfile)&#10;            //     } else {&#10;            //         onResult(loadProfileLocally(context))&#10;            //     }&#10;            // }&#10;            onResult(loadProfileLocally(context))&#10;        } else {&#10;            // For unauthenticated users, only use local storage&#10;            onResult(loadProfileLocally(context))&#10;        }&#10;    }&#10;    &#10;    private suspend fun loadProfileFromCloud(context: Context, userId: String, onResult: (UserProfile?) -&gt; Unit) = withContext(Dispatchers.IO) {&#10;        try {&#10;            // TODO: Implement Supabase client properly&#10;            // val client = SupabaseService.getClient(context)&#10;            // val response = client.from(&quot;user_profiles&quot;).select().eq(&quot;id&quot;, userId).single()&#10;            // val profile = response.decodeAs&lt;UserProfile&gt;()&#10;            &#10;            Log.d(TAG, &quot;Loading profile from Supabase cloud (placeholder)&quot;)&#10;            onResult(null) // Fallback to local for now&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error loading profile from Supabase cloud&quot;, e)&#10;            onResult(null)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Migrates local profile data to cloud when user upgrades from anonymous to authenticated&#10;     */&#10;    suspend fun migrateLocalToCloud(context: Context) {&#10;        val currentUser = SupabaseService.Auth.getCurrentUser(context)&#10;        if (currentUser != null) {&#10;            val localProfile = loadProfileLocally(context)&#10;            if (localProfile != null) {&#10;                // TODO: Implement when we have proper user ID access&#10;                // saveProfileToCloud(context, localProfile, currentUser.id)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Deletes local profile data (useful when user signs out)&#10;     */&#10;    fun clearLocalProfile(context: Context) {&#10;        val prefs = getPrefs(context)&#10;        prefs.edit().remove(PROFILE_KEY).apply()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.lumoralabs.macro.data&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import android.util.Log&#10;import com.lumoralabs.macro.domain.UserProfile&#10;import org.json.JSONObject&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;&#10;object UserProfileRepository {&#10;    private const val PREFS_NAME = &quot;user_profile&quot;&#10;    private const val PROFILE_KEY = &quot;profile&quot;&#10;    private const val TAG = &quot;UserProfileRepository&quot;&#10;&#10;    private fun getPrefs(context: Context): SharedPreferences = &#10;        context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;&#10;    suspend fun saveProfile(context: Context, profile: UserProfile) {&#10;        // Always save locally first for immediate access&#10;        saveProfileLocally(context, profile)&#10;        // Save to cloud if user is authenticated&#10;        val currentUser = SupabaseService.Auth.getCurrentUser(context)&#10;        if (currentUser != null) {&#10;            // TODO: Fix this when we have proper user ID access&#10;            // saveProfileToCloud(context, profile, currentUser.id)&#10;        }&#10;    }&#10;    &#10;    private fun saveProfileLocally(context: Context, profile: UserProfile) {&#10;        val prefs = getPrefs(context)&#10;        val obj = JSONObject().apply {&#10;            put(&quot;firstName&quot;, profile.firstName)&#10;            put(&quot;lastName&quot;, profile.lastName)&#10;            put(&quot;age&quot;, profile.age)&#10;            put(&quot;dob&quot;, profile.dob)&#10;            put(&quot;height&quot;, profile.height)&#10;            put(&quot;weight&quot;, profile.weight)&#10;            put(&quot;gender&quot;, profile.gender)&#10;            put(&quot;goal&quot;, profile.goal)&#10;            put(&quot;activityLevel&quot;, profile.activityLevel)&#10;            put(&quot;macroPreference&quot;, profile.macroPreference)&#10;        }&#10;        prefs.edit {&#10;            putString(PROFILE_KEY, obj.toString())&#10;        }&#10;    }&#10;    &#10;    private suspend fun saveProfileToCloud(context: Context, profile: UserProfile, userId: String) = withContext(Dispatchers.IO) {&#10;        val data = mapOf(&#10;            &quot;id&quot; to userId,&#10;            &quot;first_name&quot; to profile.firstName,&#10;            &quot;last_name&quot; to profile.lastName,&#10;            &quot;age&quot; to profile.age,&#10;            &quot;dob&quot; to profile.dob,&#10;            &quot;height&quot; to profile.height,&#10;            &quot;weight&quot; to profile.weight,&#10;            &quot;gender&quot; to profile.gender,&#10;            &quot;goal&quot; to profile.goal,&#10;            &quot;activity_level&quot; to profile.activityLevel,&#10;            &quot;macro_preference&quot; to profile.macroPreference,&#10;            &quot;last_updated&quot; to System.currentTimeMillis()&#10;        )&#10;        &#10;        try {&#10;            // TODO: Implement Supabase client properly&#10;            // val client = SupabaseService.getClient(context)&#10;            // client.from(&quot;user_profiles&quot;).upsert(data)&#10;            Log.d(TAG, &quot;Profile would be saved to Supabase cloud when implemented&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error saving profile to Supabase cloud&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun loadProfile(context: Context): UserProfile? {&#10;        return loadProfileLocally(context)&#10;    }&#10;&#10;    private fun loadProfileLocally(context: Context): UserProfile? {&#10;        val prefs = getPrefs(context)&#10;        val profileStr = prefs.getString(PROFILE_KEY, null) ?: return null&#10;        return try {&#10;            val obj = JSONObject(profileStr)&#10;            UserProfile(&#10;                firstName = obj.optString(&quot;firstName&quot;, &quot;&quot;),&#10;                lastName = obj.optString(&quot;lastName&quot;, &quot;&quot;),&#10;                age = obj.optInt(&quot;age&quot;, 0),&#10;                dob = obj.optString(&quot;dob&quot;, &quot;&quot;),&#10;                height = obj.optDouble(&quot;height&quot;, 0.0).toFloat(),&#10;                weight = obj.optDouble(&quot;weight&quot;, 0.0).toFloat(),&#10;                gender = obj.optString(&quot;gender&quot;, &quot;&quot;),&#10;                goal = obj.optString(&quot;goal&quot;, &quot;&quot;),&#10;                activityLevel = obj.optString(&quot;activityLevel&quot;, &quot;&quot;),&#10;                macroPreference = obj.optString(&quot;macroPreference&quot;, &quot;&quot;)&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error parsing profile&quot;, e)&#10;            null&#10;        }&#10;    }&#10;&#10;    suspend fun loadProfile(context: Context, onResult: (UserProfile?) -&gt; Unit = {}) {&#10;        // Try to load from cloud first if user is authenticated&#10;        val currentUser = SupabaseService.Auth.getCurrentUser(context)&#10;        if (currentUser != null) {&#10;            // TODO: Implement cloud loading when we have proper user ID access&#10;            // loadProfileFromCloud(context, currentUser.id) { cloudProfile -&gt;&#10;            //     if (cloudProfile != null) {&#10;            //         saveProfileLocally(context, cloudProfile)&#10;            //         onResult(cloudProfile)&#10;            //     } else {&#10;            //         onResult(loadProfileLocally(context))&#10;            //     }&#10;            // }&#10;            onResult(loadProfileLocally(context))&#10;        } else {&#10;            // For unauthenticated users, only use local storage&#10;            onResult(loadProfileLocally(context))&#10;        }&#10;    }&#10;    &#10;    private suspend fun loadProfileFromCloud(context: Context, userId: String, onResult: (UserProfile?) -&gt; Unit) = withContext(Dispatchers.IO) {&#10;        try {&#10;            // TODO: Implement Supabase client properly&#10;            // val client = SupabaseService.getClient(context)&#10;            // val response = client.from(&quot;user_profiles&quot;).select().eq(&quot;id&quot;, userId).single()&#10;            // val profile = response.decodeAs&lt;UserProfile&gt;()&#10;            &#10;            Log.d(TAG, &quot;Loading profile from Supabase cloud (placeholder)&quot;)&#10;            onResult(null) // Fallback to local for now&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error loading profile from Supabase cloud&quot;, e)&#10;            onResult(null)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Migrates local profile data to cloud when user upgrades from anonymous to authenticated&#10;     */&#10;    suspend fun migrateLocalToCloud(context: Context) {&#10;        val currentUser = SupabaseService.Auth.getCurrentUser(context)&#10;        if (currentUser != null) {&#10;            val localProfile = loadProfileLocally(context)&#10;            if (localProfile != null) {&#10;                // TODO: Implement when we have proper user ID access&#10;                // saveProfileToCloud(context, localProfile, currentUser.id)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Deletes local profile data (useful when user signs out)&#10;     */&#10;    fun clearLocalProfile(context: Context) {&#10;        val prefs = getPrefs(context)&#10;        prefs.edit {&#10;            remove(PROFILE_KEY)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>